{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar ctors = require( '@stdlib/array-ctors' );\nvar gfillBy = require( '@stdlib/blas-ext-base-gfill-by' );\nvar filledArray = require( '@stdlib/array-base-filled-by' );\nvar hasIteratorSymbolSupport = require( '@stdlib/assert-has-iterator-symbol-support' );\nvar ITERATOR_SYMBOL = require( '@stdlib/symbol-iterator' );\nvar iterLength = require( '@stdlib/iter-length' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\nvar DEFAULT_DTYPE = 'float64';\n\n\n// FUNCTIONS //\n\n/**\n* Creates a filled \"generic\" array from an iterator.\n*\n* @private\n* @param {Iterable} it - iterator\n* @param {Callback} clbk - callback function\n* @param {*} thisArg - callback function execution context\n* @returns {Array} filled array\n*/\nfunction filledArrayIterator( it, clbk, thisArg ) {\n\tvar arr;\n\tvar i;\n\tvar v;\n\n\tarr = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tarr.push( clbk.call( thisArg, i ) );\n\t}\n\treturn arr;\n}\n\n/**\n* Fills an array exposing accessors for getting and setting array elements.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {Callback} clbk - callback function\n* @param {*} thisArg - callback function execution context\n* @returns {Collection} input array\n*/\nfunction filledAccessors( arr, clbk, thisArg ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tarr.set( clbk.call( thisArg, i ), i );\n\t}\n\treturn arr;\n}\n\n\n// MAIN //\n\n/**\n* Creates a filled array according to a provided callback function.\n*\n* @param {(NonNegativeInteger|TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype=\"float64\"] - data type\n* @param {Callback} [clbk] - callback to invoke\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} must provide a recognized data type\n* @throws {TypeError} must provide a length, typed array, array-like object, buffer, or iterable\n* @throws {TypeError} callback argument must be a function.\n* @throws {Error} creating a generic array from an `ArrayBuffer` is not supported\n* @returns {(TypedArray|Array)} array or typed array\n*\n* @example\n* var arr = filledarrayBy();\n* // returns <Float64Array>\n*\n* @example\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, 'generic', clbk );\n* // returns [ 1.0, 1.0 ]\n*\n* @example\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( [ 0.5, 0.5 ], clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* function clbk() {\n*     return 1;\n* }\n*\n* var arr = filledarrayBy( [ 5, -3 ], 'int32', clbk );\n* // returns <Int32Array>[ 1, 1 ]\n*\n* @example\n* function clbk1() {\n*     return 10;\n* }\n*\n* function clbk2() {\n*     return 1.0;\n* }\n*\n* var arr1 = filledarrayBy( [ 5, 3 ], 'int32', clbk1 );\n* var arr2 = filledarrayBy( arr1, clbk2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* function clbk1() {\n*     return 1.0;\n* }\n*\n* function clbk2() {\n*     return 2;\n* }\n*\n* var arr1 = filledarrayBy( [ 5, 3 ], 'int32', clbk1 );\n* var arr2 = filledarrayBy( arr1, 'uint32', clbk2 );\n* // returns <Uint32Array>[ 2, 2 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 8, clbk );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 8, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarrayBy( buf, 8, 2, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* function clbk() {\n*     return 1;\n* }\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarrayBy( buf, 8, 2, 'int32', clbk );\n* // returns <Int32Array>[ 1, 1 ]\n*/\nfunction filledarrayBy() {\n\tvar thisArg;\n\tvar nargs;\n\tvar dtype;\n\tvar clbk;\n\tvar ctor;\n\tvar arr;\n\tvar len;\n\tvar arg;\n\n\tnargs = arguments.length;\n\n\t// If we weren't provided any arguments, return an empty array...\n\tif ( nargs === 0 ) {\n\t\tctor = ctors( DEFAULT_DTYPE );\n\t\treturn new ctor( 0 );\n\t}\n\t// Check if we were provided a dtype as the first argument...\n\tdtype = arguments[ 0 ];\n\tif ( isString( dtype ) ) {\n\t\t// Invoking this function with arguments `f( dtype, clbk[, thisArg] )` is not allowed (otherwise, we'd need to also allow `f( clbk[, thisArg] )`)...\n\t\tif ( nargs > 1 ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Must provide a length, typed array, array-like object, or an iterable.' );\n\t\t}\n\t\tctor = ctors( dtype );\n\t\tif ( ctor === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t\t}\n\t\t// Return an empty array having the specified dtype:\n\t\treturn new ctor( 0 );\n\t}\n\t// For all other supported invocations, we need at least two arguments...\n\tif ( nargs < 2 ) {\n\t\tthrow new TypeError( 'invalid arguments. Must provide a length, typed array, array-like object, or an iterable.' );\n\t}\n\t// At this point, we need to do some argument juggling...\n\tnargs -= 1; // henceforth, the number of available arguments is `nargs+1`\n\n\t// Determine whether the last argument is a callback or \"this\" context...\n\tif ( isFunction( arguments[ nargs ] ) ) {\n\t\t// If the last argument is a function, we need to check the next-to-last argument, and, if the next-to-last argument is a function, assume that the next-to-last argument is the callback and the last argument is a \"this\" context...\n\t\tif ( isFunction( arguments[ nargs-1 ] ) ) {\n\t\t\tthisArg = arguments[ nargs ];\n\t\t\tnargs -= 1;\n\t\t\tclbk = arguments[ nargs ];\n\n\t\t\t// Check if we were provided only a callback and a \"this\" context..\n\t\t\tif ( nargs === 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid arguments. Must provide a length, typed array, array-like object, or an iterable.' );\n\t\t\t}\n\t\t} else {\n\t\t\t// \"this\" context is left undefined...\n\t\t\tclbk = arguments[ nargs ];\n\t\t}\n\t}\n\t// If we were provided 3 or more arguments and the last argument was not a function, assume that we were provided a callback and a \"this\" context...\n\telse if ( nargs >= 2 ) {\n\t\tthisArg = arguments[ nargs ];\n\t\tnargs -= 1;\n\t\tclbk = arguments[ nargs ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t}\n\t// If were were only provided 2 arguments and the last argument was not a function, we've been provided an insufficient number of arguments...\n\telse {\n\t\tthrow new TypeError( 'invalid arguments. Must provide a length, typed array, array-like object, or an iterable.' );\n\t}\n\t// Now that we've processed the callback arguments, let's continue working backward to see if we've been provided a `dtype` argument...\n\tnargs -= 1;\n\tif ( nargs >= 0 && isString( arguments[ nargs ] ) ) {\n\t\tdtype = arguments[ nargs ];\n\t\tnargs -= 1;\n\t} else {\n\t\tdtype = DEFAULT_DTYPE;\n\t}\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\t// At this point, we've resolved the output array data type, and now we can actually create the output array...\n\tif ( dtype === 'generic' ) {\n\t\targ = arguments[ 0 ];\n\t\tif ( nargs === 0 ) {\n\t\t\tif ( isNonNegativeInteger( arg ) ) {\n\t\t\t\tlen = arg;\n\t\t\t} else if ( isCollection( arg ) ) {\n\t\t\t\tlen = arg.length;\n\t\t\t}\n\t\t\tif ( len !== void 0 ) {\n\t\t\t\treturn filledArray( len, clbk, thisArg );\n\t\t\t}\n\t\t\tif ( isArrayBuffer( arg ) ) {\n\t\t\t\tthrow new Error( 'invalid arguments. Creating a generic array from an ArrayBuffer is not supported.' );\n\t\t\t}\n\t\t\tif ( isObject( arg ) ) {\n\t\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, typed array, or array-like object. Value: `%s`.', arg ) );\n\t\t\t\t}\n\t\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t\t}\n\t\t\t\targ = arg[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( arg.next ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t\t}\n\t\t\t\treturn filledArrayIterator( arg, clbk, thisArg );\n\t\t\t}\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tthrow new Error( 'invalid arguments. Creating a generic array from an ArrayBuffer is not supported.' );\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t}\n\tif ( nargs === 0 ) { // length || array-like || ArrayBuffer || iterable\n\t\targ = arguments[ 0 ];\n\t\tif ( isCollection( arg ) ) {\n\t\t\tarr = new ctor( arg.length );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tarr = new ctor( arg );\n\t\t} else if ( isNonNegativeInteger( arg ) ) {\n\t\t\tarr = new ctor( arg );\n\t\t} else if ( isObject( arg ) ) {\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, typed array, or array-like object. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\targ = arg[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( arg.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tarr = new ctor( iterLength( arg ) );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t}\n\t} else if ( nargs === 1 ) {\n\t\tarr = new ctor( arguments[0], arguments[1] ); // (ArrayBuffer, byteOffset)\n\t} else {\n\t\tarr = new ctor( arguments[0], arguments[1], arguments[2] ); // (ArrayBuffer, byteOffset, length)\n\t}\n\tif ( arr.length > 0 ) {\n\t\tif ( /^complex/.test( dtype ) ) {\n\t\t\tfilledAccessors( arr, clbk, thisArg );\n\t\t} else {\n\t\t\tgfillBy( arr.length, arr, 1, callback );\n\t\t}\n\t}\n\treturn arr;\n\n\t/**\n\t* Callback which wraps a provided callback and is invoked for each array element.\n\t*\n\t* @private\n\t* @param {*} value - element value\n\t* @param {NonNegativeInteger} aidx - array index\n\t* @param {NonNegativeInteger} sidx - strided index\n\t* @param {Collection} array - input array/collection\n\t* @returns {*} callback return value\n\t*/\n\tfunction callback( value, aidx ) {\n\t\treturn clbk.call( thisArg, aidx );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = filledarrayBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a filled array according to a provided callback function.\n*\n* @module @stdlib/array-filled-by\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* var arr = filledarrayBy();\n* // returns <Float64Array>\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( 2, 'generic', clbk );\n* // returns [ 1.0, 1.0 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var arr = filledarrayBy( [ 0.5, 0.5 ], clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1;\n* }\n*\n* var arr = filledarrayBy( [ 5, -3 ], 'int32', clbk );\n* // returns <Int32Array>[ 1, 1 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk1() {\n*     return 10;\n* }\n*\n* function clbk2() {\n*     return 1.0;\n* }\n*\n* var arr1 = filledarrayBy( [ 5, 3 ], 'int32', clbk1 );\n* var arr2 = filledarrayBy( arr1, clbk2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk1() {\n*     return 1.0;\n* }\n*\n* function clbk2() {\n*     return 2;\n* }\n*\n* var arr1 = filledarrayBy( [ 5, 3 ], 'int32', clbk1 );\n* var arr2 = filledarrayBy( arr1, 'uint32', clbk2 );\n* // returns <Uint32Array>[ 2, 2 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 8, clbk );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarrayBy( buf, 8, 'float32', clbk );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1.0;\n* }\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarrayBy( buf, 8, 2, clbk );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var filledarrayBy = require( '@stdlib/array-filled-by' );\n*\n* function clbk() {\n*     return 1;\n* }\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarrayBy( buf, 8, 2, 'int32', clbk );\n* // returns <Int32Array>[ 1, 1 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["isString","require$$0","isPrimitive","isNonNegativeInteger","require$$1","isCollection","require$$2","isArrayBuffer","require$$3","isObject","require$$4","isFunction","require$$5","ctors","require$$6","gfillBy","require$$7","filledArray","require$$8","ITERATOR_SYMBOL","require$$10","iterLength","require$$11","format","require$$12","HAS_ITERATOR_SYMBOL","require$$9","filledArrayIterator","it","clbk","thisArg","arr","i","next","done","push","call","filledAccessors","length","set","lib","nargs","dtype","ctor","len","arg","arguments","TypeError","Error","test","callback","value","aidx"],"mappings":"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"}